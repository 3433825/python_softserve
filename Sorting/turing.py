"""
give an array of integers k. Sort the array by the leastrepeated integers. If multiple integers have the same
number occurences, sort them in descending order.
Return the final array

Для решения этой задачи вам понадобятся несколько шагов. Вот пример реализации на языке Python:

from collections import Counter

def sort_least_repeated(array):
    # Подсчет числа вхождений каждого элемента
    counter = Counter(array)

    # Сортировка по наименее встречаемым элементам
    least_repeated = sorted(counter.items(), key=lambda x: (x[1], -x[0]))

    # Добавление элементов в результирующий массив в соответствии с их количеством
    sorted_array = []
    for element, count in least_repeated:
        sorted_array.extend([element] * count)

    return sorted_array

Вызов функции sort_least_repeated с массивом целых чисел k вернет отсортированный массив с наименее повторяющимися
числами. Если несколько чисел имеют одинаковое количество повторений, они будут отсортированы в порядке убывания.

Пример использования:

python
Copy code
k = [3, 2, 4, 2, 5, 4, 3, 1, 1, 2, 3]
sorted_result = sort_least_repeated(k)
print(sorted_result)
Вывод:

csharp
Copy code
[5, 4, 4, 5, 1, 1, 2, 2, 2, 3, 3, 3, 3]
В этом примере массив k сначала подвергается подсчету числа вхождений каждого элемента с помощью Counter.
Затем используется функция sorted с ключом сортировки, который сначала сортирует элементы по возрастанию количества
их повторений (x[1]), а затем в порядке убывания самого элемента (-x[0]). Это гарантирует сортировку наименее
повторяющихся элементов и, в случае равного количества повторений, сортировку в порядке убывания.
Затем происходит формирование результирующего массива, добавляя каждый элемент из отсортированного списка
least_repeated в соответствии с его количеством повторений.
Наконец, отсортированный массив возвращается в качестве результата.

Этот код выполняет сортировку элементов словаря counter, который, вероятно, содержит подсчет количества повторений
каждого элемента. Он сортирует элементы по двум критериям:
По количеству повторений (x[1]): Это первый ключ сортировки. x[1] обращается к второму элементу кортежа,
  который представляет пару (ключ, значение) в словаре counter. В данном случае, это значение, которое представляет
  количество повторений элемента.
По ключу в обратном порядке (-x[0]): Это второй ключ сортировки. -x[0] обращается к первому элементу кортежа,
  который представляет ключ элемента в словаре counter. Унарный минус (-) используется для сортировки в обратном
  порядке, т.е., по убыванию.
Таким образом, код сначала сортирует элементы словаря counter по количеству повторений в порядке возрастания
(меньшие значения идут раньше), а затем, если есть элементы с одинаковым количеством повторений, они сортируются по
ключу в обратном порядке (в порядке убывания).
"""
from collections import Counter
from modules import advanced_logg

logger = advanced_logg.advanced_logger()


def sort_least_repeated(array: list):
    logger.info("sort_least_repeated")

    # Подсчет числа вхождений каждого элемента
    counter = Counter(array)

    # Сортировка по наименее встречаемым элементам
    least_repeated = sorted(counter.items(), key=lambda x: (x[1], -x[0]))

    # Добавление элементов в результирующий массив в соответствии с их количеством
    sorted_array = []
    for element, count in least_repeated:
        sorted_array.extend([element] * count)

    logger.info(f"before sorting: {array}, after sorting: {sorted_array}")
    return sorted_array


k = [3, 2, 4, 2, 5, 4, 3, 1, 1, 2, 3, 8]
print(sort_least_repeated(k))
